"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[153],{6262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},5232:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>m,data:()=>b});var e=a(641);const t=a.p+"assets/img/image-20240304212702894.43df814b.png",p=a.p+"assets/img/image-20240304214814123.7ebb5f5c.png",o=a.p+"assets/img/image-20240304221018613.498bf741.png",l=a.p+"assets/img/image-20240307135602509.a45d0038.png",c=(0,e.Fv)('<h1 id="算法" tabindex="-1"><a class="header-anchor" href="#算法"><span>算法</span></a></h1><h3 id="code" tabindex="-1"><a class="header-anchor" href="#code"><span>code</span></a></h3><hr><ol><li><p>链表</p><blockquote><p>环的入口节点，如果一链表中包含环，如何确定环的起点</p><p><img src="'+t+'" alt="image-20240304212702894"></p><p>解法：双指针，通过快慢指针找到处于环中的节点，快指针每次走两步，慢指针每次走一步，由于链表存在环，因此最终肯定会碰上（快的会追上慢的，rectify:快指针多走n步，随后两个指针每次都是走一步），重复的位置就是处于环中的节点。<strong>接着如果快慢指针每次走的步长相差为环的长度的整数倍，则最终必会在入口处碰上</strong>(rectify:初始时，快指针多走环的长度的步长，接着每次都走一步)，问题转化为寻找环的长度的问题，环的长度可以通过单指针实现，在步骤一中得到的起始节点出发，走一遍，并进行计数，最终就能得到环的长度。接着进行步骤二就能找到入口节点。</p></blockquote></li></ol><hr><blockquote><p>链表中倒数第K个节点</p><p>解法：双指针，快指针初始多走k（<strong>k-1</strong>）步，接着每次都走一步，快指针到终点时，慢指针刚好指向倒数第k个节点。</p><p><img src="'+p+'" alt="image-20240304214814123"></p></blockquote><hr><blockquote><p>调整数组顺序使奇数位于偶数前面</p><p>解法：双指针，奇偶（分别向中心移动），奇奇（<strong>while到奇数</strong>左指针+1），偶偶（右指针-1），偶奇（交换）</p><p>2，1，4，5，3</p><p>3，1，4，5，2</p><p>3，1，5，4，2</p></blockquote><hr><blockquote><ul><li>删除链表的节点：给定单向链表的头指针和一个节点指针，定义一个函数在O(1)时间内删除该节点</li></ul><p>解法：有了要删除的节点指针，可以知道该节点的下一个节点，把下一个节点的值赋值给要删除的节点，将当前节点的next指向下下个节点，<strong>除此之外还需要把待删除节点指向的下一个节点删除</strong>。倘若在尾部，只能顺序查找删除</p><p><img src="'+o+'" alt="image-20240304221018613"></p><p>时间复杂度的分析</p><p>((n-1)*O(1)+O(n))/n=O(1a)</p><ul><li>删除已排序链表中重复的节点</li></ul><p>双指针</p></blockquote><hr><blockquote><p>打印从1到最大的n位数</p><p>常规做法会出现越界问题，考点是字符串的数字加法及终止条件的判定</p></blockquote><hr><blockquote><p>数值的整数次方</p><p>解法：先举例子</p></blockquote><hr><blockquote><p>二进制中1的个数</p><p>解法：输入的二进制数与0001进行与运算，若为1则说明最低位存在1，接着左移一位，得到0010，即与输入的二进制数的次低位进行与运算，判断次低位是否为1，以此类推</p></blockquote><hr><blockquote><p>反转链表</p><p>解法：由于当前节点和下个节点的顺序反转后，链表出现了断裂，即下个节点与下下个节点之间的链接出现断裂，因此需要记录三个节点的信息，</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>prev_node = nullptr\nwhile(p-&gt;node!=nullptr)\n{\nnext_node = p-&gt;node-&gt;next\np-&gt;node-&gt;next = prev_node\nprev_node = p-&gt;node\np-&gt;node = next_node\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><hr><blockquote><p>合并两个排序链表</p><p>解法：比较两个链表头节点的大小，将小的一个作为合并后链表的头节点，接着继续合并链表中的剩余节点</p><img src="'+l+'" alt="image-20240307135602509" style="zoom:50%;"><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mergehead\nif phead1-&gt;value &lt; phead2-&gt;value:\n\tmergehead=phead1\n\tmergehead=\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><hr><blockquote><p>树的子结构</p></blockquote><p>**</p><blockquote><p>二叉树的镜像</p></blockquote><h4 id="反转链表i" tabindex="-1"><a class="header-anchor" href="#反转链表i"><span>反转链表I</span></a></h4>',25),i=(0,e.Lk)("li",null,[(0,e.Lk)("p",null,"示例：[1->2->3->4->5] --\x3e [5->4->3->2->1]")],-1),r={href:"https://leetcode.cn/problems/reverse-linked-list/solution/206-fan-zhuan-lian-biao-shuang-zhi-zhen-r1jel/",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Fv)('<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>curr<span class="token punctuation">,</span>prev <span class="token operator">=</span> head<span class="token punctuation">,</span><span class="token boolean">None</span>\n<span class="token keyword">while</span> curr<span class="token punctuation">:</span> <span class="token comment"># not null</span>\n    tmp<span class="token operator">=</span>curr<span class="token punctuation">.</span><span class="token builtin">next</span>\n    curr<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>prev\n    prev<span class="token operator">=</span>curr\n    curr<span class="token operator">=</span>tmp \n<span class="token keyword">return</span> prev <span class="token comment"># 迭代结束, prev 以及 curr 成为反转链表的头节点以及尾节点</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反转链表ii" tabindex="-1"><a class="header-anchor" href="#反转链表ii"><span>反转链表II</span></a></h4><p>反转链表某一区间：[1-&gt;2-&gt;3-&gt;4-&gt;5] --&gt; [1-&gt;4-&gt;3-&gt;2-&gt;5]</p><p>思路1：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>left<span class="token punctuation">,</span>right\n<span class="token keyword">while</span> left<span class="token operator">&lt;</span>right<span class="token punctuation">:</span>\n    tmp<span class="token operator">=</span>l<span class="token punctuation">.</span>val\n    l<span class="token punctuation">.</span>val<span class="token operator">=</span>l<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val\n    l<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token operator">=</span>tmp\n    l<span class="token operator">=</span>l<span class="token punctuation">.</span><span class="token builtin">next</span>\n    left<span class="token operator">+=</span><span class="token number">1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，机试时一般不允许修改节点的值。因此只能通过修改节点指向改变。</p><p>思路2：</p><p>将需要反转的区间从原链表内截断出来，反转完成后再连接起来</p><p>[1-&gt;<code>2-&gt;3-&gt;4</code>-&gt;5] 2,4</p><p>截断+反转：[1 <code>2&lt;-3&lt;-4</code> 5]</p><p>拼接： [<code>1-&gt;4</code>-&gt;3-&gt;<code>2-&gt;5</code>]</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">reverselistnode</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    curr<span class="token punctuation">,</span>prev<span class="token operator">=</span>l<span class="token punctuation">.</span>head<span class="token punctuation">,</span><span class="token boolean">None</span>\n    <span class="token keyword">while</span> curr<span class="token punctuation">:</span>\n        tmp<span class="token operator">=</span>curr\n        curr<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>prev\n        pre0v<span class="token operator">=</span>curr\n        curr<span class="token operator">=</span>tmp\n    <span class="token keyword">return</span> prev\n\nr_tail_prev<span class="token operator">=</span>l1<span class="token punctuation">.</span>head\n<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    r_tail_prev<span class="token operator">=</span>r_tail_prev<span class="token punctuation">.</span><span class="token builtin">next</span>\nr_head<span class="token operator">=</span>r_tail\n<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    r_head<span class="token operator">=</span>r_head<span class="token punctuation">.</span><span class="token builtin">next</span>\n    \n<span class="token comment"># 截断</span>\nr_tail_prev<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span>\nr_head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span>\n\n<span class="token comment"># 反转</span>\nreverselistnode<span class="token punctuation">(</span>r_head<span class="token punctuation">)</span>\nr_tail_prev<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>prev\nr_head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>curr\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除链表的倒数第n个节点" tabindex="-1"><a class="header-anchor" href="#删除链表的倒数第n个节点"><span>删除链表的倒数第n个节点</span></a></h4><p>[1,2,3,4,5] --&gt; [1,2,3,5] n=2</p><p>添加哑节点，因为如果要删除的是头节点，需要知道头节点的前驱，将前驱的后继改为前驱的后继的后继，因此添加哑节点就只需要考虑通用情况。</p><p>思路1：通过链表长度，得到倒数第<code>n</code>个节点的前驱。由于到达倒数第<code>n</code>个节点需要知道链表的长度，因此需两次遍历。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">getlength</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    length<span class="token operator">=</span><span class="token number">0</span>\n    <span class="token keyword">while</span> l<span class="token punctuation">:</span>\n    \tl<span class="token operator">=</span>l<span class="token punctuation">.</span><span class="token builtin">next</span>\n    \tlength<span class="token operator">+=</span><span class="token number">1</span>\n    <span class="token keyword">return</span> length\nlength<span class="token operator">=</span>getlength<span class="token punctuation">(</span>l<span class="token punctuation">)</span>\nl<span class="token operator">=</span>Listnode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token comment"># 添加哑节点</span>\n<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token operator">-</span>n<span class="token punctuation">)</span>\n\tdel_prev<span class="token operator">=</span>del_prev<span class="token punctuation">.</span><span class="token builtin">next</span>\ndel_prev<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>del_prev<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路2：双指针，初始时，快指针先走<code>n</code>步，慢指针仍处于头节点，之后每次二者都只走一步，当快指针到达尾节点时（为空时），慢指针就到了倒数第<code>n</code>个节点。</p><p>[<code>1</code>,2,<code>3</code>,4,5,null] n=2</p><p>[1,2,3,<code>4</code>,5,<code>null</code>] # 但是我们要的是待删除节点的前一个结点</p><p>因此添加哑节点：[==0==,1,2,3,4,5,null]</p><p>初始时慢指针指向哑节点，快指针指向头节点，随后多走<code>n</code>步：</p><p>[<code>0</code>,1,2,<code>3</code>,4,5,null] [0,1,2,<code>3</code>,4,5,<code>null</code>]</p><h4 id="链表已排序-删除重复元素" tabindex="-1"><a class="header-anchor" href="#链表已排序-删除重复元素"><span>链表已排序，删除重复元素</span></a></h4><p>[1,2,3,3,4,4,5]</p><p>如果题目存在需删除或修改头节点的情况，此时添加哑节点。</p><p>[==dummy_node==,<code>1</code>,<code>2</code>,3,3,4,4,5,null]</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>dummy<span class="token operator">=</span>ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span> <span class="token comment"># 添加哑节点</span>\ncur<span class="token operator">=</span>dummy\n<span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span> <span class="token comment"># cur.next存在，但是cur.next.next已经到达null。此时无需删除了，肯定不是重复的</span>\n    <span class="token keyword">if</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span> <span class="token comment"># 说明当前cur的后两项重复，都需要删除</span>\n    \ttmp<span class="token operator">=</span>cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token comment"># 记录重复项</span>\n        <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> tmp<span class="token punctuation">:</span> <span class="token comment"># 将cur的下一个元素删除，此时cur为2</span>\n            cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token comment"># 循环过程：2指向第2个3，2指向4</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n    \tcur<span class="token operator">=</span>cur<span class="token punctuation">.</span><span class="token builtin">next</span>\n<span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="旋转链表" tabindex="-1"><a class="header-anchor" href="#旋转链表"><span>旋转链表</span></a></h4><blockquote><p>示例：原始序列:[1,2,3,4,5]</p><p>k=1,[5,1,2,3,4] k=2,[4,<code>5,1</code>,2,<code>3,null</code>]</p></blockquote><p>[==1==,2,<code>3</code>,==4==,5,<code>null</code>] k=2</p><ul><li><p><code>k=2</code> 时, 找倒数第 <code>k+1=3</code> 个节点(3,tail_k_prev), 最终要使得倒数第<code>3</code>个节点(3)的后继为 <code>null</code>, 尾节点(5)的后继为 <code>head</code>。</p></li><li><p>寻找tail_k_prev: (倒数第 k 个节点的前驱)</p><p>快指针在第 ==4== 个节点, 慢指针在第一个节点, 后续快慢一致, 就可以得到 <code>tail_k_prev</code>。</p></li><li><p>考虑 <code>k&gt;len(listnode)</code> 的情况:</p><p>[1,2,3,4,5] <code>k=5</code> 时, 不变; <code>k=6</code> 时与 <code>k=1</code> 时情况一致。因此 k = k % len(listnode)</p></li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">lastknode</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    slow<span class="token punctuation">,</span>fast <span class="token operator">=</span> head<span class="token punctuation">,</span>head\n    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>\n    <span class="token keyword">while</span> fast<span class="token punctuation">:</span>\n        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>\n        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>\n    <span class="token keyword">return</span> slow\n<span class="token comment"># 找到尾节点</span>\ntail<span class="token operator">=</span>head\nlength<span class="token operator">=</span><span class="token number">0</span>\n<span class="token keyword">while</span> tail<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>\n    tail<span class="token operator">=</span>tail<span class="token punctuation">.</span><span class="token builtin">next</span>\n    length<span class="token operator">+</span><span class="token operator">+</span>\nk<span class="token operator">=</span>k <span class="token operator">%</span> length\ntail_k_prev <span class="token operator">=</span> lastknode<span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>\ncur<span class="token operator">=</span>tail_k_prev<span class="token punctuation">.</span><span class="token builtin">next</span>\ntail<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>head\ntail_k_prev<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>null\n<span class="token keyword">return</span> cur\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="分隔链表" tabindex="-1"><a class="header-anchor" href="#分隔链表"><span>分隔链表</span></a></h4><blockquote><p>[1,4,3,2,5,2], x=3</p><p>[1,2,2,4,3,5]</p></blockquote>',35),d={href:"https://leetcode.cn/problems/partition-list/solution/86-fen-ge-lian-biao-shuang-zhi-zhen-qing-hha7/",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Fv)('<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>    sml_dummy<span class="token punctuation">,</span>big_dummy<span class="token operator">=</span>ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 新建两个链表</span>\n    sml<span class="token punctuation">,</span>big<span class="token operator">=</span>sml_dummy<span class="token punctuation">,</span>big_dummy\n    <span class="token keyword">while</span> head<span class="token punctuation">:</span>\n        <span class="token keyword">if</span> head<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> x<span class="token punctuation">:</span>\n            sml<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>head\n            sml<span class="token operator">=</span>sml<span class="token punctuation">.</span><span class="token builtin">next</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            big<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>head\n            big<span class="token operator">=</span>big<span class="token punctuation">.</span><span class="token builtin">next</span>\n        head<span class="token operator">=</span>head<span class="token punctuation">.</span><span class="token builtin">next</span>\n    sml<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>big_dummy<span class="token punctuation">.</span><span class="token builtin">next</span>\n    big<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">=</span>null\n<span class="token keyword">return</span> sml_dummy<span class="token punctuation">.</span><span class="token builtin">next</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>群体节点：0</p><p>个体节点：1，2，3 1与2相邻</p><p>[<code>[1，1，1，1]</code></p><p>[<code>1</code>，1，1，0]</p><p>[<code>1</code>，1，1，0]</p><p>[<code>1</code>，0，0，1]]</p>',7),v={},m=(0,a(6262).A)(v,[["render",function(n,s){const a=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[c,(0,e.Lk)("ol",null,[i,(0,e.Lk)("li",null,[(0,e.Lk)("p",null,[(0,e.Lk)("a",r,[(0,e.eW)("题解"),(0,e.bF)(a)])])])]),u,(0,e.Lk)("p",null,[(0,e.Lk)("a",d,[(0,e.eW)("题解"),(0,e.bF)(a)])]),k])}]]),b=JSON.parse('{"path":"/posts/work/code.html","title":"算法","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-04-12T00:00:00.000Z","category":["tec","code"],"tag":["tec"],"description":"算法 code 链表 环的入口节点，如果一链表中包含环，如何确定环的起点 image-20240304212702894 解法：双指针，通过快慢指针找到处于环中的节点，快指针每次走两步，慢指针每次走一步，由于链表存在环，因此最终肯定会碰上（快的会追上慢的，rectify:快指针多走n步，随后两个指针每次都是走一步），重复的位置就是处于环中的节点。接着如...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myblog/posts/work/code.html"}],["meta",{"property":"og:site_name","content":"Ljh\'s Blog"}],["meta",{"property":"og:title","content":"算法"}],["meta",{"property":"og:description","content":"算法 code 链表 环的入口节点，如果一链表中包含环，如何确定环的起点 image-20240304212702894 解法：双指针，通过快慢指针找到处于环中的节点，快指针每次走两步，慢指针每次走一步，由于链表存在环，因此最终肯定会碰上（快的会追上慢的，rectify:快指针多走n步，随后两个指针每次都是走一步），重复的位置就是处于环中的节点。接着如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T07:54:44.000Z"}],["meta",{"property":"article:author","content":"Jinhao Lin"}],["meta",{"property":"article:tag","content":"tec"}],["meta",{"property":"article:published_time","content":"2024-04-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T07:54:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T07:54:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Jinhao Lin\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"code","slug":"code","link":"#code","children":[]}],"git":{"createdTime":1714982084000,"updatedTime":1714982084000,"contributors":[{"name":"ChosenOne23","email":"652994621@qq.com","commits":1}]},"readingTime":{"minutes":6.35,"words":1906},"filePathRelative":"posts/work/code.md","localizedDate":"2024年4月12日","excerpt":"\\n<h3>code</h3>\\n<hr>\\n<ol>\\n<li>\\n<p>链表</p>\\n<blockquote>\\n<p>环的入口节点，如果一链表中包含环，如何确定环的起点</p>\\n<p></p>\\n<p>解法：双指针，通过快慢指针找到处于环中的节点，快指针每次走两步，慢指针每次走一步，由于链表存在环，因此最终肯定会碰上（快的会追上慢的，rectify:快指针多走n步，随后两个指针每次都是走一步），重复的位置就是处于环中的节点。<strong>接着如果快慢指针每次走的步长相差为环的长度的整数倍，则最终必会在入口处碰上</strong>(rectify:初始时，快指针多走环的长度的步长，接着每次都走一步)，问题转化为寻找环的长度的问题，环的长度可以通过单指针实现，在步骤一中得到的起始节点出发，走一遍，并进行计数，最终就能得到环的长度。接着进行步骤二就能找到入口节点。</p>\\n</blockquote>\\n</li>\\n</ol>","autoDesc":true}')}}]);